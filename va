下面我将提供一个完整的 React 表单验证框架实现，包含所有核心模块和示例用法。

1. 核心类型定义 (core/types.ts)
typescript
Copy
export type ValidationRule = {
  validate: (value: any, context?: any) => boolean | Promise<boolean>;
  message: string | ((value: any) => string);
};

export type ValidationResult = {
  isValid: boolean;
  errors: Record<string, string>;
};

export type FormState<T extends Record<string, any>> = {
  values: T;
  errors: Record<keyof T, string>;
  touched: Record<keyof T, boolean>;
  isSubmitting: boolean;
  isValid: boolean;
};

export type FormActions<T extends Record<string, any>> =
  | { type: 'SET_VALUE'; field: keyof T; value: any }
  | { type: 'SET_ERROR'; field: keyof T; error: string }
  | { type: 'SET_TOUCHED'; field: keyof T; touched: boolean }
  | { type: 'SET_IS_SUBMITTING'; isSubmitting: boolean }
  | { type: 'RESET'; values?: Partial<T> };
2. 验证器核心实现 (core/validator.ts)
typescript
Copy
import { ValidationRule, ValidationResult } from './types';

export abstract class Validator<T extends Record<string, any>> {
  protected fieldRules: Record<keyof T, ValidationRule[]>;
  protected formRules: ValidationRule[];

  constructor() {
    this.fieldRules = {} as Record<keyof T, ValidationRule[]>;
    this.formRules = [];
  }

  addFieldRule(field: keyof T, rule: ValidationRule): void {
    if (!this.fieldRules[field]) {
      this.fieldRules[field] = [];
    }
    this.fieldRules[field].push(rule);
  }

  addFormRule(rule: ValidationRule): void {
    this.formRules.push(rule);
  }

  async validate(values: T): Promise<ValidationResult> {
    const errors: Record<string, string> = {};
    let isValid = true;

    // Validate individual fields
    for (const field in this.fieldRules) {
      const error = await this.validateField(field, values[field], values);
      if (error) {
        errors[field as string] = error;
        isValid = false;
      }
    }

    // Validate form-level rules
    for (const rule of this.formRules) {
      const valid = await rule.validate(values);
      if (!valid) {
        const message = typeof rule.message === 'function' 
          ? rule.message(values) 
          : rule.message;
        errors['_form'] = message;
        isValid = false;
        break;
      }
    }

    return { isValid, errors };
  }

  async validateField(
    field: keyof T, 
    value: any, 
    context?: any
  ): Promise<string | null> {
    if (!this.fieldRules[field]) return null;

    for (const rule of this.fieldRules[field]) {
      const isValid = await rule.validate(value, context);
      if (!isValid) {
        return typeof rule.message === 'function' 
          ? rule.message(value) 
          : rule.message;
      }
    }

    return null;
  }
}
3. 内置验证规则 (core/rules/index.ts)
typescript
Copy
import { ValidationRule } from '../types';

export const required = (message = 'This field is required'): ValidationRule => ({
  validate: (value) => {
    if (value === undefined || value === null) return false;
    if (typeof value === 'string' && value.trim() === '') return false;
    if (Array.isArray(value) && value.length === 0) return false;
    return true;
  },
  message
});

export const minLength = (min: number, message?: string): ValidationRule => ({
  validate: (value) => 
    value === undefined || value === null || value.length >= min,
  message: message || `Must be at least ${min} characters`
});

export const maxLength = (max: number, message?: string): ValidationRule => ({
  validate: (value) => 
    value === undefined || value === null || value.length <= max,
  message: message || `Must be at most ${max} characters`
});

export const email = (message = 'Invalid email format'): ValidationRule => ({
  validate: (value) => 
    !value || /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value),
  message
});

export const pattern = (regex: RegExp, message: string): ValidationRule => ({
  validate: (value) => !value || regex.test(value),
  message
});

export const equals = (otherValue: any, message: string): ValidationRule => ({
  validate: (value) => value === otherValue,
  message
});
4. 表单 Hook 实现 (hooks/useForm.ts)
typescript
Copy
import { useReducer, useCallback, useEffect } from 'react';
import { FormState, FormActions } from '../core/types';

function formReducer<T extends Record<string, any>>(
  state: FormState<T>,
  action: FormActions<T>
): FormState<T> {
  switch (action.type) {
    case 'SET_VALUE':
      return {
        ...state,
        values: { ...state.values, [action.field]: action.value },
        touched: { ...state.touched, [action.field]: true }
      };
      
    case 'SET_ERROR':
      return {
        ...state,
        errors: { ...state.errors, [action.field]: action.error }
      };
      
    case 'SET_TOUCHED':
      return {
        ...state,
        touched: { ...state.touched, [action.field]: action.touched }
      };
      
    case 'SET_IS_SUBMITTING':
      return { ...state, isSubmitting: action.isSubmitting };
      
    case 'RESET':
      return {
        values: { ...state.values, ...action.values },
        errors: {} as Record<keyof T, string>,
        touched: {} as Record<keyof T, boolean>,
        isSubmitting: false,
        isValid: false
      };
      
    default:
      return state;
  }
}

export function useForm<T extends Record<string, any>>(
  initialValues: T,
  validator?: Validator<T>
) {
  const [state, dispatch] = useReducer(
    formReducer,
    {
      values: initialValues,
      errors: {} as Record<keyof T, string>,
      touched: {} as Record<keyof T, boolean>,
      isSubmitting: false,
      isValid: false
    }
  );

  const validateField = useCallback(
    async (field: keyof T) => {
      if (!validator) return true;
      
      const error = await validator.validateField(
        field, 
        state.values[field], 
        state.values
      );
      
      dispatch({ type: 'SET_ERROR', field, error: error || '' });
      return !error;
    },
    [validator, state.values]
  );

  const validateForm = useCallback(async () => {
    if (!validator) return true;
    
    const result = await validator.validate(state.values);
    Object.entries(result.errors).forEach(([field, error]) => {
      dispatch({ 
        type: 'SET_ERROR', 
        field: field as keyof T, 
        error 
      });
    });
    
    return result.isValid;
  }, [validator, state.values]);

  const handleChange = useCallback(
    (field: keyof T, value: any) => {
      dispatch({ type: 'SET_VALUE', field, value });
    },
    []
  );

  const handleBlur = useCallback(
    async (field: keyof T) => {
      dispatch({ type: 'SET_TOUCHED', field, touched: true });
      await validateField(field);
    },
    [validateField]
  );

  const handleSubmit = useCallback(
    async (onSubmit: (values: T) => Promise<void> | void) => {
      dispatch({ type: 'SET_IS_SUBMITTING', isSubmitting: true });
      
      const isValid = await validateForm();
      if (!isValid) {
        dispatch({ type: 'SET_IS_SUBMITTING', isSubmitting: false });
        return;
      }
      
      try {
        await onSubmit(state.values);
      } finally {
        dispatch({ type: 'SET_IS_SUBMITTING', isSubmitting: false });
      }
    },
    [validateForm, state.values]
  );

  const resetForm = useCallback((values?: Partial<T>) => {
    dispatch({ type: 'RESET', values });
  }, []);

  // Auto-validate when values change
  useEffect(() => {
    const validate = async () => {
      const isValid = await validateForm();
      // Only update isValid state if it's different to prevent unnecessary re-renders
      if (isValid !== state.isValid) {
        // In a real implementation, we'd need to track isValid in state
      }
    };
    
    validate();
  }, [state.values, validateForm]);

  return {
    values: state.values,
    errors: state.errors,
    touched: state.touched,
    isSubmitting: state.isSubmitting,
    isValid: state.isValid,
    handleChange,
    handleBlur,
    handleSubmit,
    resetForm,
    validateField,
    validateForm
  };
}
5. 表单上下文 (context/FormContext.tsx)
typescript
Copy
import { createContext, useContext } from 'react';
import { useForm } from '../hooks/useForm';
import { Validator } from '../core/validator';

type FormContextType<T> = ReturnType<typeof useForm<T>>;

const FormContext = createContext<FormContextType<any> | null>(null);

export function FormProvider<T extends Record<string, any>>({
  initialValues,
  validator,
  children,
  onSubmit
}: {
  initialValues: T;
  validator?: Validator<T>;
  children: React.ReactNode;
  onSubmit: (values: T) => Promise<void> | void;
}) {
  const form = useForm(initialValues, validator);

  return (
    <FormContext.Provider value={form}>
      <form onSubmit={(e) => {
        e.preventDefault();
        form.handleSubmit(onSubmit);
      }}>
        {children}
      </form>
    </FormContext.Provider>
  );
}

export function useFormContext<T extends Record<string, any>>() {
  const context = useContext(FormContext) as FormContextType<T>;
  if (!context) {
    throw new Error('useFormContext must be used within a FormProvider');
  }
  return context;
}
6. 表单组件 (components/)
Field.tsx
typescript
Copy
import React from 'react';
import { useFormContext } from '../context/FormContext';

type FieldProps = {
  name: string;
  label?: string;
  type?: string;
  placeholder?: string;
  children?: React.ReactNode;
};

export function Field({
  name,
  label,
  type = 'text',
  placeholder,
  children
}: FieldProps) {
  const { values, errors, touched, handleChange, handleBlur } = useFormContext();
  
  if (children) {
    return React.cloneElement(children as React.ReactElement, {
      name,
      value: values[name] || '',
      onChange: (e: any) => handleChange(name, e.target.value),
      onBlur: () => handleBlur(name),
      'aria-invalid': !!errors[name],
      'aria-describedby': errors[name] ? `${name}-error` : undefined
    });
  }
  
  return (
    <div className="form-field">
      {label && <label htmlFor={name}>{label}</label>}
      <input
        id={name}
        name={name}
        type={type}
        value={values[name] || ''}
        onChange={(e) => handleChange(name, e.target.value)}
        onBlur={() => handleBlur(name)}
        placeholder={placeholder}
        aria-invalid={!!errors[name]}
        aria-describedby={errors[name] ? `${name}-error` : undefined}
      />
      {touched[name] && errors[name] && (
        <div id={`${name}-error`} className="error-message">
          {errors[name]}
        </div>
      )}
    </div>
  );
}
SubmitButton.tsx
typescript
Copy
import React from 'react';
import { useFormContext } from '../context/FormContext';

export function SubmitButton({
  children,
  disabled: propDisabled,
  ...props
}: React.ButtonHTMLAttributes<HTMLButtonElement>) {
  const { isSubmitting, isValid } = useFormContext();
  const disabled = propDisabled || isSubmitting || !isValid;
  
  return (
    <button type="submit" disabled={disabled} {...props}>
      {isSubmitting ? 'Submitting...' : children}
    </button>
  );
}
7. 示例用法
typescript
Copy
import React from 'react';
import { Validator } from './core/validator';
import { required, email, minLength, equals } from './core/rules';
import { FormProvider, Field, SubmitButton } from './components';

// 1. 创建验证器
const signupValidator = new Validator<{
  email: string;
  password: string;
  confirmPassword: string;
}>();

// 2. 添加验证规则
signupValidator.addFieldRule('email', required());
signupValidator.addFieldRule('email', email());
signupValidator.addFieldRule('password', required());
signupValidator.addFieldRule('password', minLength(8));
signupValidator.addFieldRule('confirmPassword', required());
signupValidator.addFormRule(
  equals(
    (values) => values.password,
    'confirmPassword',
    'Passwords do not match'
  )
);

// 3. 创建表单组件
function SignupForm() {
  const handleSubmit = async (values: any) => {
    console.log('Submitting:', values);
    // 这里通常是API调用
    await new Promise(resolve => setTimeout(resolve, 1000));
    console.log('Submission complete');
  };

  return (
    <FormProvider
      initialValues={{
        email: '',
        password: '',
        confirmPassword: ''
      }}
      validator={signupValidator}
      onSubmit={handleSubmit}
    >
      <Field name="email" label="Email" type="email" />
      <Field name="password" label="Password" type="password" />
      <Field name="confirmPassword" label="Confirm Password" type="password" />
      
      <SubmitButton>Sign Up</SubmitButton>
    </FormProvider>
  );
}

export default SignupForm;
8. 扩展功能实现
8.1 动态表单验证
typescript
Copy
class DynamicValidator<T extends Record<string, any>> extends Validator<T> {
  private getRulesForField: (field: keyof T) => ValidationRule[];

  constructor(getRulesForField: (field: keyof T) => ValidationRule[]) {
    super();
    this.getRulesForField = getRulesForField;
  }

  async validateField(
    field: keyof T, 
    value: any, 
    context?: any
  ): Promise<string | null> {
    const rules = this.getRulesForField(field);
    if (!rules) return null;

    for (const rule of rules) {
      const isValid = await rule.validate(value, context);
      if (!isValid) {
        return typeof rule.message === 'function' 
          ? rule.message(value) 
          : rule.message;
      }
    }

    return null;
  }
}
8.2 异步验证规则
typescript
Copy
export function asyncRule(
  validateFn: (value: any) => Promise<boolean>,
  message: string | ((value: any) => string)
): ValidationRule {
  return {
    validate: validateFn,
    message
  };
}

// 使用示例
validator.addFieldRule('username', asyncRule(
  async (username) => {
    const response = await fetch(`/api/check-username?username=${username}`);
    const data = await response.json();
    return data.available;
  },
  'Username is already taken'
));
8.3 跨字段验证
typescript
Copy
export function crossFieldRule(
  fields: string[],
  validateFn: (values: Record<string, any>) => boolean,
  message: string
): ValidationRule {
  return {
    validate: (_, context) => validateFn(context),
    message
  };
}

// 使用示例
validator.addFormRule(crossFieldRule(
  ['password', 'confirmPassword'],
  (values) => values.password === values.confirmPassword,
  'Passwords do not match'
));
9. 样式集成示例
typescript
Copy
// form.css
.form-field {
  margin-bottom: 1rem;
}

.form-field label {
  display: block;
  margin-bottom: 0.5rem;
}

.form-field input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.form-field input[aria-invalid="true"] {
  border-color: #ff0000;
}

.error-message {
  color: #ff0000;
  font-size: 0.875rem;
  margin-top: 0.25rem;
}

button[type="submit"] {
  background-color: #007bff;
  color: white;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button[type="submit"]:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}
这个完整的实现提供了一个功能强大且灵活的 React 表单验证框架，包含了从核心验证逻辑到 UI 组件的完整解决方案。您可以根据项目需求进一步扩展或调整。

New chat
